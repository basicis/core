<?php
namespace Basicis\Cache;

use Psr\Cache\CacheItemInterface;

/**
 * CacheItem class, defines an interface for interacting with objects inside a cache.
 *
 * Each Item object MUST be associated with a specific key, which can be set
 * according to the implementing system and is typically passed by the
 * Cache\CacheItemPoolInterface object.
 *
 * The Cache\CacheItemInterface object encapsulates the storage and retrieval of
 * cache items. Each Cache\CacheItemInterface is generated by a
 * Cache\CacheItemPoolInterface object, which is responsible for any required
 * setup as well as associating the object with a unique Key.
 * Cache\CacheItemInterface objects MUST be able to store and retrieve any type
 * of PHP value defined in the Data section of the specification.
 *
 * Calling Libraries MUST NOT instantiate Item objects themselves. They may only
 * be requested from a Pool object via the getItem() method.  Calling Libraries
 * SHOULD NOT assume that an Item created by one Implementing Library is
 * compatible with a Pool from another Implementing Library.
 *
 * @category Basicis/Cache
 * @package  Basicis/Cache
 * @author   Messias Dias <https://github.com/messiasdias> <messiasdias.ti@gmail.com>
 * @license  https://opensource.org/licenses/MIT MIT License
 * @link     https://github.com/basicis/core/blob/master/src/Cache/CacheItem.php
 */
class CacheItem implements CacheItemInterface
{
    /**
     * $key variable
     *
     * @var string
     */
    private $key;

    /**
     * $value variable
     *
     * @var mixed
     */
    private $value;

    /**
     * $expiration variable
     *
     * @var \DateTimeInterface|null
     */
    private $expiration;

    /**
     * $time variable
     *
     * @var int|string|\DateIntervalInterface|null
     */
    private $time;

    /**
     * __construct function
     *
     * @param  string                                 $key
     * @param  mixed                                  $value
     * @param  \DateTimeInterface|null                $expiration
     * @param  int|string|\DateIntervalInterface|null $time
     * @return void
     */
    public function __construct(string $key = null, $value = null, $expiration = null, $time = null)
    {
        if (!is_null($key)) {
            $this->key = $key;
        }

        if (!is_null($value)) {
            $this->set($value);
        }

        $this->expiresAt($expiration);
        $this->expiresAfter($time);
    }

    /**
     * Function  getKey
     * Returns the key for the current cache item.
     *
     * The key is loaded by the Implementing Library, but should be available to
     * the higher level callers when needed.
     *
     * @return string
     *   The key string for this cache item.
     */
    public function getKey() : string
    {
        return $this->key ?? '';
    }

    /**
     * Function setKey
     *
     * @param  string $key
     * @return void
     */
    public function setKey(string $key)
    {
        $this->key = $key;
    }

    /**
     * Function get
     * Retrieves the value of the item from the cache associated with this object's key.
     * The value returned must be identical to the value originally stored by set().
     * If isHit() returns false, this method MUST return null. Note that null
     * is a legitimate cached value, so the isHit() method SHOULD be used to
     * differentiate between "null value was found" and "no value was found."
     *
     * @return mixed
     *   The value corresponding to this cache item's key, or null if not found.
     */
    public function get()
    {
        if ($this->isHit()) {
            return unserialize($this->value);
        }
        return null;
    }


    /**
     * Function isHit
     * Confirms if the cache item lookup resulted in a cache hit.
     *
     * Note: This method MUST NOT have a race condition between calling isHit()
     * and calling get().
     *
     * @return bool
     *   True if the request resulted in a cache hit. False otherwise.
     */
    public function isHit() : bool
    {
        $now = new \DateTime("now");
        if (!is_null($this->value) && ($now->getTimestamp() > $this->expiration->sub($this->time)->getTimestamp())) {
            return true;
        }
        return false;
    }


    /**
     * Function set
     * Sets the value represented by this cache item.
     *
     * The $value argument may be any item that can be serialized by PHP,
     * although the method of serialization is left up to the Implementing
     * Library.
     *
     * @param mixed $value
     *   The serializable value to be stored.
     *
     * @return static
     *   The invoked object.
     */
    public function set($value) : CacheItem
    {
        $this->value = serialize($value);
        return $this;
    }


    /**
     * Function expiresAt
     * Sets the expiration time for this cache item.
     *
     * @param \DateTimeInterface|null $expiration
     *   The point in time after which the item MUST be considered expired.
     *   If null is passed explicitly, a default value MAY be used. If none is set,
     *   the value should be stored permanently or for as long as the
     *   implementation allows.
     *
     * @return static
     *   The called object.
     */
    public function expiresAt($expiration) :  CacheItem
    {
        if (!is_null($expiration) && ( $expiration instanceof \DateTimeInterface)) {
            $this->expiration = $expiration;
        } else {
            $now  = new \DateTime('now');
            $this->expiration = new \DateTime(date('Y-m-d H:i:s', $now->getTimestamp()+60));
        }
        return $this;
    }

    /**
     * Function expiresAfter
     * Sets the expiration time for this cache item.
     *
     * @param int|string|\DateInterval|null $time
     *   The period of time from the present after which the item MUST be considered
     *   expired. An integer parameter is understood to be the time in seconds until
     *   expiration. If null is passed explicitly, a default value MAY be used.
     *   If none is set, the value should be stored permanently or for as long as the
     *   implementation allows.
     *
     * @return static
     *   The called object.
     */
    public function expiresAfter($time = null) : CacheItem
    {
        if (is_int($time)) {
            $this->time = \DateInterval::createFromDateString("{$time} seconds");
        } elseif ($time instanceof \DateIntervalInterface) {
            $this->time = $time;
        } elseif (is_string($time) && preg_match("/^[0-9]{1,} [a-zA-Z]{3,}$/", $time)) {
            $this->time = \DateInterval::createFromDateString($time);
        } else {
            $this->time = \DateInterval::createFromDateString('90 seconds');
        }
        return $this;
    }
}
